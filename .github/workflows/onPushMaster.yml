# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "master" ]
    tags:
      - "v*"

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    strategy:
      matrix:
        revit_config:
          - Release 2021
          - Release 2022
          - Release 2023
          - Release 2024
          - Release 2025
          - Release 2026

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Application Version
      id: version
      uses: paulhatch/semantic-version@v5.0.2
      with:
        tag_prefix: "v"
        version_format: "${major}.${minor}.${patch}"
        search_commit_body: true

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x

    - name: Authenticate nuget feed
      run: dotnet nuget add source --username kristoffer-tungland --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/kristoffer-tungland/index.json"
      working-directory: src

    # Build and pack dRofusClient.Revit for each Revit configuration
    - name: Build dRofusClient.Revit
      run: dotnet build dRofusClient.Revit/dRofusClient.Revit.csproj --configuration "${{ matrix.revit_config }}" -p:Version=${{ steps.version.outputs.version }}
      working-directory: src

    - name: Pack dRofusClient.Revit
      run: dotnet pack dRofusClient.Revit/dRofusClient.Revit.csproj --no-build --configuration "${{ matrix.revit_config }}" -p:Version=${{ steps.version.outputs.version }} --output "./nupkgs/${{ matrix.revit_config }}"
      working-directory: src

    - name: Upload NuGet packages
      uses: actions/upload-artifact@v4
      with:
        name: revit-${{ matrix.revit_config }}-packages
        path: src/nupkgs/${{ matrix.revit_config }}/*.nupkg
        retention-days: 1

  build-core:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Application Version
      id: version
      uses: paulhatch/semantic-version@v5.0.2
      with:
        tag_prefix: "v"
        version_format: "${major}.${minor}.${patch}"
        search_commit_body: true

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x

    # dRofusClient steps
    - name: Restore dRofusClient
      run: dotnet restore dRofusClient/dRofusClient.csproj
      working-directory: src
      
    - name: Build dRofusClient
      run: dotnet build dRofusClient/dRofusClient.csproj --no-restore --configuration Release -p:Version=${{ steps.version.outputs.version }}
      working-directory: src
      
    - name: Pack dRofusClient
      run: dotnet pack dRofusClient/dRofusClient.csproj --no-build --configuration Release -p:Version=${{ steps.version.outputs.version }} --output ./nupkgs
      working-directory: src

    # dRofusClient.Windows steps
    - name: Restore dRofusClient.Windows
      run: dotnet restore dRofusClient.Windows/dRofusClient.Windows.csproj
      working-directory: src
      
    - name: Build dRofusClient.Windows
      run: dotnet build dRofusClient.Windows/dRofusClient.Windows.csproj --no-restore --configuration Release -p:Version=${{ steps.version.outputs.version }}
      working-directory: src
      
    - name: Pack dRofusClient.Windows
      run: dotnet pack dRofusClient.Windows/dRofusClient.Windows.csproj --no-build --configuration Release -p:Version=${{ steps.version.outputs.version }} --output ./nupkgs
      working-directory: src

    # dRofusClient.WindowsCredentials steps
    - name: Restore dRofusClient.WindowsCredentials
      run: dotnet restore dRofusClient.WindowsCredentials/dRofusClient.WindowsCredentials.csproj
      working-directory: src
      
    - name: Build dRofusClient.WindowsCredentials
      run: dotnet build dRofusClient.WindowsCredentials/dRofusClient.WindowsCredentials.csproj --no-restore --configuration Release -p:Version=${{ steps.version.outputs.version }}
      working-directory: src
      
    - name: Pack dRofusClient.WindowsCredentials
      run: dotnet pack dRofusClient.WindowsCredentials/dRofusClient.WindowsCredentials.csproj --no-build --configuration Release -p:Version=${{ steps.version.outputs.version }} --output ./nupkgs
      working-directory: src

    - name: Upload NuGet packages
      uses: actions/upload-artifact@v4
      with:
        name: core-packages
        path: src/nupkgs/*.nupkg
        retention-days: 1

  publish:
    needs: [build, build-core]
    runs-on: windows-latest
    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x

    - name: Authenticate nuget feed
      run: dotnet nuget add source --username kristoffer-tungland --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/kristoffer-tungland/index.json"

    - name: Download Revit packages
      uses: actions/download-artifact@v4
      with:
        pattern: revit-*-packages
        path: all-packages/revit-packages

    - name: Download Core packages
      uses: actions/download-artifact@v4
      with:
        name: core-packages
        path: all-packages/core-packages

    - name: Push all packages to GitHub
      run: |
        $packages = Get-ChildItem -Path "all-packages" -Filter "*.nupkg" -Recurse
        Write-Host "Found $($packages.Count) packages to publish"
        foreach ($package in $packages) {
          Write-Host "Pushing $($package.FullName) to GitHub"
          dotnet nuget push $package.FullName --api-key ${{ secrets.TOKEN }} --source "github" --skip-duplicate
        }
      shell: pwsh

    - name: Push all packages to NuGet.org
      run: |
        $packages = Get-ChildItem -Path "all-packages" -Filter "*.nupkg" -Recurse
        Write-Host "Found $($packages.Count) packages to publish"
        foreach ($package in $packages) {
          Write-Host "Pushing $($package.FullName) to NuGet.org"
          dotnet nuget push $package.FullName --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        }
      shell: pwsh

    - id: "release"
      name: "Automatic Release"
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "v${{ needs.build.outputs.version }}"
        prerelease: false
        title: "Release ${{ needs.build.outputs.version }}"
        files: |
          LICENSE.txt
          README.md
          all-packages/**/*.nupkg